// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         DateTime
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  username  String      @unique
  NIC       String
  emailVerified DateTime? @map("email_verified")
  password  String
  image     String      @default("https://res.cloudinary.com/dx3x66zpi/image/upload/v1633660134/Eventify/default-user-image.jpg")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  eventUser eventUser[]
  accounts      Account[]
  sessions      Session[]
}

model Event {
  eventId        Int             @id @default(autoincrement())
  eventName      String
  eventDate      DateTime
  eventVenue     String
  eventPosterUrl String
  ticketDetails  TicketDetails[]
  eventUsers     eventUser[]
  artists        Artist[]        @relation("EventArtists")
}

model TicketDetails {
  ticketId    String      @id @default(uuid())
  ticketPrice Float
  ticketQty   Int
  ticketType  String
  eventId     Int
  event       Event       @relation(fields: [eventId], references: [eventId])
  eventUser   eventUser[]
}

model eventUser {
  orderId         String        @id @default(uuid())
  numberOfTickets Int
  eventId         Int
  userId          String
  ticketId        String
  event           Event         @relation(fields: [eventId], references: [eventId])
  user            User          @relation(fields: [userId], references: [id])
  ticket          TicketDetails @relation(fields: [ticketId], references: [ticketId])
}

model Artist {
  artistId       String  @id @default(uuid())
  artistName     String
  artistImageUrl String
  event          Event[] @relation("EventArtists")
}
