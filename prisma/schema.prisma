generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  type              String?
  provider          String
  providerAccountId String    @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  scope             String?
  id_token          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  expires_at        BigInt?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  username      String
  nic           String?     @map("NIC")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  password      String?      
  image         String?     
  emailVerified DateTime?   @map("email_verified")
  sessions      Session[]
  accounts      Account[]
  eventUser     eventUser[]
}

model Event {
  eventId        Int             @id @default(autoincrement())
  eventName      String
  eventDate      DateTime
  eventVenue     String
  eventPosterUrl String
  ticketDetails  TicketDetails[]
  eventUsers     eventUser[]
  artists        Artist[]        @relation("EventArtists")
}

model TicketDetails {
  ticketId    String      @id @default(uuid())
  ticketPrice Float
  ticketQty   Int
  ticketType  String
  eventId     Int
  event       Event       @relation(fields: [eventId], references: [eventId])
  eventUser   eventUser[]
}

model eventUser {
  eventId         Int
  userId          String
  ticketId        String
  numberOfTickets Int
  orderId         String        @id @default(uuid())
  event           Event         @relation(fields: [eventId], references: [eventId])
  ticket          TicketDetails @relation(fields: [ticketId], references: [ticketId])
  user            User          @relation(fields: [userId], references: [id])
}

model Artist {
  artistId       String  @id @default(uuid())
  artistName     String
  artistImageUrl String
  event          Event[] @relation("EventArtists")
}
